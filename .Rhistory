my_max(x)
my_max <- function(x){
max = 0 ## initialize max
for (i in 1:length(x)){
if (x[i]>max)max <- MAX
}
print(x)
}
my_max(x)
my_max <- function(x){
max = 0 ## initialize max
for (i in 1:length(x)){
if (x[i]>max)max <- max
}
print(x)
}
my_max(x)
}
my_max <- function(x){
max = 0 ## initialize max
for (i in 1:length(x)){
if (x[i]>max)max <- x
}
print(x)
}
my_max(x)
my_max <- function(x){
max = 0 ## initialize max
for (i in 1:length(x)){
if (x[i]>max)max <- x[i]
}
print(x)
}
my_max(x)
my_max <- function(x){
max = 0 ## initialize max
for (i in 1:length(x)){
if (x[i]>max)max <- x[i]
}
print(max)
}
my_max(x)
my_mean <- function(x){
x_sum <- 0
x_num <- 0
for (i in x){
x_sum <- x_num + 1
s <- s + 1
x_mean = x_sum/x_num
}
print(x_mean)
}
my_mean(x)
my_mean <- function(x){
x_sum <- 0
x_num <- 0
for (i in x){
x_sum <- x_num + 1
x_mean = x_sum/x_num
}
print(x_mean)
}
my_mean(x)
my_mean <- function(x){
x_sum <- 0
x_num <- 0
for (i in 1:length(x)){
x_sum <- x_num + x[i]
x_mean = x_sum/x_num
}
print(x_mean)
}
my_mean <- function(x){
x_sum <- 0
x_num <- 0
for (i in 1:length(x)){
x_sum <- x_num + x[i]
x_mean = x_sum/x_num
}
print(x_mean)
}
my_mean(x)
x <- 100
for (t in 1:48){    # loop is equivalent to 1.05^48
x <- x*1.05
}
x
x <- 100
t <- 0
while (x <= 1e6){
t <- t + 1
x <- 1.05*x
}
x
t
x <- 100
t <- 0
while (x <= 1e6){
t <- t + 1
x <- 1.05*x
}
x
t
x <- 100
t <-0
repeat{
t <- t + 1
x <- 1.05*x
if (x < 1e6) break
}
x
t
x <- 100
t <- 0
while (x <= 1e6){
t <- t + 1
x <- 1.05*x
}
x
t
x <- 100
t <-0
repeat{
t <- t + 1
x <- 1.05*x
if (x <= 1e6) break
}
x
t
x <- 100
t <- 0
repeat{
t <- t + 1
x <- 1.05*x
if (x <= 1e6) break
}
x
t
c("BSc", "MSc", "PhD")[degree]
(degree <- c("master", "master", "bachelor", "phd", "bachelor", "master"))
c("BSc", "MSc", "PhD")[degree]
(degree <- c("master", "master", "bachelor", "phd", "bachelor", "master"))
c("BSc", "MSc", "PhD")[degree]
new_names <- c("BSc", "MSc", "PhD")
(idx <- as.integer(degree))
new_names <- c("BSc", "MSc", "PhD")
(idx <- as.integer(degree))
new_names <- c("BSc", "MSc", "PhD")
(idx <- as.integer(degree))
new_names(idx)
new_names <- c("BSc", "MSc", "PhD")
(idx <- as.integer(degree))
new_names(idx)
new_names <- c("BSc", "MSc", "PhD")
(idx <- as.integer(degree))
new_names[idx]
(degree <- c("master", "master", "bachelor", "phd", "bachelor", "master"))
# c("BSc", "MSc", "PhD")[degree]
new_names <- c("BSc", "MSc", "PhD")
(idx <- as.integer(degree))
new_names[idx]
(degree <- c("master", "master", "bachelor", "phd", "bachelor", "master"))
# c("BSc", "MSc", "PhD")[degree]
degree <- factor(degree)
new_names <- c("BSc", "MSc", "PhD")
(idx <- as.integer(degree))
new_names[idx]
c("BSc", "MSc", "PhD")[degree]
c.factor <- function(x, y) {
return(factor(c(as.character(x), as.character(y))))
}
c(degree, degree2)
degree  <- factor(c("master", "bachelor", "bachelor"))
degree2 <- factor(c("phd", "bachelor", "bachelor", "phd"))
c(degree, degree2) # Losing information!!
# coercing both factor objects, # combine two char vecs, & create a new factor out of it;
factor(c(as.character(degree), as.character(degree2)))
# instead we use c() or c.factor() method:
c.factor <- function(x, y) {
return(factor(c(as.character(x), as.character(y))))
}
c(degree, degree2)
pm25 <- c(100, 75, 230, 220, 50)   # Vector for testing
attr(pm25, "limit") <- 150         # Adding attribute 'limit'
class(pm25) <- "threshold"         # Adding class attribute
print(pm25)
load("~/MA/VU introduction into programming with R/win-library/3.6/Archive/Discdownscrpits/contacts.rda")
load('contacts.rda')
friends$Matze
View(friends)
load('contacts.rda')
friends$Matze
friends$Marc$kids <- c(friends$Marc$kids == "Lea")
fr
as.factor(data, labels = c("Canadian", "Russian", "Australian"), ordered = TRUE)
data <- c(1L, 1L, 1L)
as.factor(data, labels = c("Canadian", "Russian", "Australian"), ordered = TRUE)
factor(data, levels = 1:3, labels = c("Australian", "Russian", "Canadian"), ordered = TRUE)
factor(data, levels = 1:3, labels = c("Australian", "Russian", "Canadian"), ordered = FALSE)
categorical(data, ordered = TRUE)
as.interger(data)
as.integer(data)
summary(data)
levels(fac)
levels(data)
load("~/MA/VU introduction into programming with R/win-library/3.6/Archive/Discdownscrpits/traffic.rda")
traffic <- data.frame(traffic)
View(traffic)
View(traffic)
traffic <- traffic["Date"]
traffic <- traffic['Date']
traffic <- traffic[,c(total, date)]
traffic <- traffic[,c("total", "Date")]
d <- as.Date("2017-01-01" 0:365)
d <- as.Date("2017-01-01")
d + 0:365
format(d, "%b","%a")
format(d, "%b%a")
d
date <- d
month <- format(d,"%b")
wday <- format(d,"%a")
traffic <- traffic[,c("total", "date", "month", "wday")]
d
d <- d + 0:365
date <- d
month <- format(d,"%b")
wday <- format(d,"%a")
date
month
wday
traffic <- traffic[,c("date" = date, "month" = month, "wday" = wday)]
d <- as.Date("2017-01-01")
d <- d + 0:364
date <- d
month <- factor(format(d,"%b"))
wday <- factor(format(d,"%a"))
traffic$date <- date
traffic$month <- month
traffic$wday <- wday
head(traffic)
(data <- data.frame(value = c(20, 40, 200, 400), label = c("A", "B", "A", "B")))
View(traffic)
min <- tapply(X = traffic$traffic, INDEX = data$month, FUN = min)
min <- tapply(X = traffic$traffic, INDEX = traffic$month, FUN = min)
#avg <- tapply(X = traffic$traffic, INDEX = traffic$month, FUN = avg)
max <- tapply(X = traffic$traffic, INDEX = traffic$month, FUN = max)
View(traffic)
max
min
avg <- tapply(X = traffic$traffic, INDEX = traffic$month, FUN = avg)
avg <- tapply(X = traffic$traffic, INDEX = traffic$month, FUN = average)
avg <- tapply(X = traffic$traffic, INDEX = traffic$month, FUN = mean)
avg
match_temperature_units <- function(x) {
match.arg(tolower(x), c("kelvin", "celsius", "fahrenheit"))
}
traffic <- data.frame(total = traffic)
d <- as.Date("2017-01-01")
d <- d + 0:364
date <- d
month <- factor(format(d,"%b"))
wday <- factor(format(d,"%a"))
traffic$date <- date
traffic$month <- month
traffic$wday <- wday
min <- tapply(X = traffic$traffic, INDEX = traffic$month, FUN = min)
avg <- tapply(X = traffic$traffic, INDEX = traffic$month, FUN = mean)
max <- tapply(X = traffic$traffic, INDEX = traffic$month, FUN = max)
traffic <- data.frame(total = traffic)
d <- as.Date("2017-01-01")
d <- d + 0:364
date <- d
month <- factor(format(d,"%b"))
wday <- factor(format(d,"%a"))
traffic$date <- date
traffic$month <- month
traffic$wday <- wday
min <- tapply(X = traffic$total, INDEX = traffic$month, FUN = min)
avg <- tapply(X = traffic$total, INDEX = traffic$month, FUN = mean)
max <- tapply(X = traffic$total, INDEX = traffic$month, FUN = max)
View(traffic)
load("~/MA/VU introduction into programming with R/win-library/3.6/Archive/Discdownscrpits/traffic.rda")
traffic <- data.frame(traffic)
d <- as.Date("2017-01-01")
d <- d + 0:364
date <- d
month <- factor(format(d,"%b"))
wday <- factor(format(d,"%a"))
traffic$date <- date
traffic$month <- month
traffic$wday <- wday
min <- tapply(X = traffic$total, INDEX = traffic$month, FUN = min)
avg <- tapply(X = traffic$total, INDEX = traffic$month, FUN = mean)
max <- tapply(X = traffic$total, INDEX = traffic$month, FUN = max)
View(traffic)
View(traffic)
traffic <- data.frame(total = traffic)
View(traffic)
traffic$traffic <- data.frame(total)
traffic$traffic <- data.frame("total")
traffic$traffic <- traffic[, "total"]
traffic <- data.frame(traffic)
load("~/MA/VU introduction into programming with R/win-library/3.6/Archive/Discdownscrpits/traffic.rda")
traffic <- data.frame(traffic)
traffic$traffic <- traffic[, "total"]
View(traffic)
View(traffic)
names(traffic)[names(traffic) == "traffic"] <- "total"
View(traffic)
load("~/MA/VU introduction into programming with R/win-library/3.6/Archive/Discdownscrpits/traffic.rda")
traffic <- data.frame(traffic)
names(traffic)[names(traffic) == "traffic"] <- "total"
d <- as.Date("2017-01-01")
d <- d + 0:364
date <- d
month <- factor(format(d,"%b"))
wday <- factor(format(d,"%a"))
traffic$date <- date
traffic$month <- month
traffic$wday <- wday
min <- tapply(X = traffic$total, INDEX = traffic$month, FUN = min)
avg <- tapply(X = traffic$total, INDEX = traffic$month, FUN = mean)
max <- tapply(X = traffic$total, INDEX = traffic$month, FUN = max)
View(traffic)
plot(min, max, avg, type = 'l')
plot(min, max, avg, type = 'l', ylim = range(traffic$total), xlab = 'month', xaxt = 'n', las = 1, ylab = '', main = 'Traffic')
val <- seq:len(nlevels(traffic$month))
val <- seq_len(nlevels(traffic$month))
plot(val, avg, type = 'l', ylim = range(traffic$total), xlab = 'month', xaxt = 'n', las = 1, ylab = '', main = 'Traffic')
lines(val,min,lty = 2)
lines(val,max,lty = 2)
axis(1, val, labels = month.abb)
View(traffic)
load("~/MA/VU introduction into programming with R/win-library/3.6/Archive/Discdownscrpits/persons.rda")
load("~/MA/VU introduction into programming with R/win-library/3.6/Archive/Discdownscrpits/persons2.rda")
emissions<-read.csv("CDIAC_worldwide.csv", comment.char = "#", sep="", header=TRUE)
setwd("C:/Users/david/OneDrive - uibk.ac.at/MA/VU introduction into programming with R/win-library/3.6/Archive/Discdownscrpits")
emissions<-read.csv("CDIAC_worldwide.csv", comment.char = "#", sep="", header=TRUE)
dim(emissions)
View(emissions)
head(emissions, n=5)
attributes(emissions) #264 observations & 8 variables
isnot<-sapply(emissions, function(x)sum(!is.numeric(emissions) & !is.character(emissions))) #in each line 1 is not character or numeric
isnot
sapply(emissions, is.numeric)
na.columns<-sapply(emissions, function(x)sum(is.na(x))) #counts NA's columnwise, all lead to same result
na.columns
na.rows<-sum(rowSums(is.na(emissions)))
na.rows
sum(is.na(emissions))
colnames(emissions)<- c("year", "total", "gas_fuel", "liquid_fuel", "solid_fuel", "cement_production", "gas_flairing", "per_capita_tons")
head(emissions)
emissions
View(emissions)
save(traffic, file = "traffic.rda");
load(file = "traffic.rda");
class(traffic)
sapply(traffic,class)
head(traffic)
saveRDS(traffic, file = "traffic.rds")
traffic2 <- readRDS(file = "traffic.rds")
identical(traffic, traffic2)
write.csv(traffic, file = "traffic.csv")
traffic3 <- read.csv("traffic.csv")
View(traffic3)
traffic <- read.csv("traffic.csv", row.names = 1)
View(traffic)
save(traffic, file = "traffic.rda");
load(file = "traffic.rda");
class(traffic)
sapply(traffic,class)
head(traffic)
saveRDS(traffic, file = "traffic.rds")
traffic2 <- readRDS(file = "traffic.rds")
identical(traffic, traffic2)
trafficA <- read.csv("traffic.csv", row.names = 1)
traffic3 <- read.csv("traffic.csv", row.names = 1, colClasses = list(date = "Date"))
View(trafficA)
class(trafficA$date)
traffic3 <- read.csv("traffic.csv", row.names = 1, colClasses = list(date = "Date"))
class(traffic3$date)
identical(traffic, traffic3)
identical(trafficA, traffic3)
identical(traffic2, traffic3)
traffic3$month <- factor(traffic3$month, levels = month.abb)
traffic3$wday <- factor(traffic3$wday, levels = levels(traffic$wday))
View(traffic3)
identical(traffic, traffic3)
identical(trafficA, traffic3)
identical(traffic2, traffic3)
View(traffic)
View(traffic2)
View(trafficA)
View(traffic3)
View(traffic2)
View(traffic)
library("openxlsx")
write.xlsx(traffic, file = "traffic_excel.xlsx")
write.xlsx(traffic, file = "traffic_excelA.xlsx", append = FALSE, quote = TRUE, sep = " ",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "")
traffic_xlsx <- read.xlsx("traffic_excel.xlsx", detectDates = TRUE)
View(traffic_xlsx)
traffic_xlsxA <- read.xlsx("traffic_excelA.xlsx", detectDates = TRUE)
View(traffic_xlsxA)
traffic_xlsx$month <- factor(traffic_xlsx$month, levels = month.abb)
traffic_xlsx$date <- as.Date(traffic_xlsx$date)
traffic_xlsx$wday <- as.character(traffic_xlsx$wday)
View(traffic_xlsx)
all.equal(traffic, traffic_xlsx)
identical(traffic, traffic_xlsx)
all.equal(trafficA, traffic_xlsx)
identical(trafficA, traffic_xlsx)
all.equal(traffic2, traffic_xlsx)
identical(traffic2, traffic_xlsx)
all.equal(traffic3, traffic_xlsx)
identical(traffic3, traffic_xlsx)
traffic_xlsx$month <- factor(traffic_xlsx$month, levels = month.abb)
traffic_xlsx$wday <- as.character(traffic_xlsx$wday, levels = unique(traffic_xlsx$wday)[c(2, 3, 4, 5, 6, 7, 1)])
traffic_xlsx$total <- as.integer(traffic_xlsx$total)
traffic_xlsx$date <- as.Date(traffic_xlsx$date)
all.equal(traffic, traffic_xlsx)
identical(traffic, traffic_xlsx)
all.equal(traffic, traffic_xlsx)
identical(traffic, traffic_xlsx)
all.equal(trafficA, traffic_xlsx)
identical(trafficA, traffic_xlsx)
all.equal(traffic2, traffic_xlsx)
identical(traffic2, traffic_xlsx)
all.equal(traffic3, traffic_xlsx)
identical(traffic3, traffic_xlsx)
View(traffic_xlsx)
file = "mittenwald-1617.csv"
read_traffic <- function(file){
# sanity checks
stopifnot(is.character(file))
stopifnot(length(metadata) == 1L)
# read data:
data <- read.csv(file, comment.char = "#", colCLasses = list(date = "Date"))
sapply(data, class)
read.table(file, comment.char = "", nrow = 3)
# read metadata:
metadata <- read.table(file, comment.char = "", nrow = 3)[, 3]
# create traffic object:
return(traffic(data, metadata))
}
View(traffic)
View(read_traffic)
traffic(data, metadata)
meta <- read.table(file, nrows = 3, comment.char = "")
View(meta)
traffic <- read.table(file, nrows = 3, comment.char = "")
file = "mittenwald-1617.csv"
traffic <- read.table(file, nrows = 3, comment.char = "")
View(traffic)
View(traffic)
traffic <- function(x, md){
# Sanity checks:
stopifnot(is.data.frame(x))
stopifnot(is.character(md))
stopifnot(lenght(md) == 3L)
stopifnot(inherits(x, "Date"))
#setting other date variables:
x$year <- as.integer(format(x$date, "%Y"))
x$month <- factor(format(x$date, "%b"), levels = month.abb, ordered = TRUE)
x$wday <- factor(format(x$date, "%a"), levels = wday.abb, ordered = TRUE)
# create the object:
class(x) <- c("traffic", "data.frame")
attr(x, "location") <- md[1]
attr(x, "highway")  <- md[2]
attr(x, "id")       <- md[3]
# Return:
return(x)
}
View(traffic)
read_traffic <- function(file){
# sanity checks
stopifnot(is.character(file))
stopifnot(length(metadata) == 1L)
# read data:
data <- read.csv(file, comment.char = "#", colCLasses = list(date = "Date"))
sapply(data, class)
read.table(file, comment.char = "", nrow = 3)
# read metadata:
metadata <- read.table(file, comment.char = "", nrow = 3)[, 3]
# create traffic object:
return(traffic(data, metadata))
}
View(read_traffic)
# create traffic:
as.data.frame.traffic <- function(x,...){
class(x) <- "data.frame"
attr(x, "Location") <- NULL
attr(x, "highway") <- NULL
attr(x, "id") <- NULL
return(x)
}
View(as.data.frame.traffic)
print.traffic <- function(x, n = 6, ...){
writeLines("Traffic counts")
writeLines(paste("Location:", attribute(x, "location")))
writeLines(paste("Location:", attribute(x, "highway")))
writeLines(paste("Location:", attribute(x, "id")))
writeLines(paste("Time period:", min(x$date), "to", max(x$date)))
print(head(as.data.frame(x), n = n), ...)
}
read("mittenwald-1617.csv")
read.csv("mittenwald-1617.csv")
file <- read.csv("mittenwald-1617.csv")
file <- read.csv("mittenwald-1617.csv",row.names = 1, colClasses = list(date = "Date"))
