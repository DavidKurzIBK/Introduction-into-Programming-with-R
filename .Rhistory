fahrenheit_to_celsius <- function(temp_f){
temp_celsius <- (temp_f - 32) * 5 / 9
return(as.numeric(temp_celsius))
}
fahrenheit_to_celsius(53.6)
??identical
?identical
2.00000000*17
double(2.0) * 17
is.integer(2.0000000)
is.double(2.0000000)
is.double(2.000000*17)
2.000000*17
(1 < 1)
(1 < 1) & 3
1 << 1
logicals
?logical()
double_max()
(1+9007199254740993)/9007199254740993
(1+max(double))/max(double)
?double
(1+9007199254740993999999999999999999999999999999)/9007199254740993999999999999999999999999999999
install.packages("zoo")
price <- 15.21
if (price > 12.51) {
print("A")
}
if (price > 11.52) {
print("B")
} else {
print("Nothing")
}
price <- 15.21
if (price > 12.51) {
print("A")
}
if (price > 11.52) {
print("B")
} else {
print("Nothing")
}
age <- 9
if (age < 10) {
print("A")
} else if (age < 20) {
print("B")
} else if (age > 50) {
print("C")
}
temperature <- 32.3
if (temperature < 10 | temperature > 31) {
print("A")
} else if (temperature > 39) {
print("B")
} else if (temperature < 100 & temperature > -3) {
print("C")
} else {
print("D")
}
if (<condition 1>) {
<action 1>
} else if (<condition 2>) {
<action 2>
} else {
<action 3>
}
insurance_costs <- function(age, power) {
# sanity checks
if (length(power) != 1 || !is.numeric(power)) {
stop("Argument 'power' must be numeric of length 1.")
}
if (length(age) != 1 || !is.numeric(age)) {
stop("Argument 'age' must be numeric of length 1.")
}
if (age < 18) {
stop("Age must be at least 18.")
}
# base price
result <- 60
# adjust/calculate final price
if (age > 70) {
result <- result + 20
} else {
if (age < 30 & power > 150) {
result <- result + 100
} else if (age < 30) {
result <- result + 30
} else {
if (power > 200) {
result <- result + 30
} else if (power < 100) {
result <- result - 20
}
}
}
# return price/costs
return(result)
}
insurance_costs <- function(age, power) {
# sanity checks
if (length(power) != 1 || !is.numeric(power)) {
stop("Argument 'power' must be numeric of length 1.")
}
if (length(age) != 1 || !is.numeric(age)) {
stop("Argument 'age' must be numeric of length 1.")
}
if (age < 18) {
stop("Age must be at least 18.")
}
# base price
result <- 60
# adjust/calculate final price
if (age > 70) {
result <- result + 20
} else {
if (age < 30 & power > 150) {
result <- result + 100
} else if (age < 30) {
result <- result + 30
} else {
if (power > 200) {
result <- result + 30
} else if (power < 100) {
result <- result - 20
}
}
}
# return price/costs
return(result)
}
insurance_costs(160)
insurance_costs(28,170)
list.add(0,5)
list.add(0,9)
list.add(1,3)
list.remove(0)
list.add(1,7)
list.add(3,6)
list.add(1,1)
x <- matrix(c(3,6,1,8,4,7,5,2), ncols = 2)
x <- matrix(c(3,6,1,8,4,7,5,2), ncol = 2)
View(x)
View(x)
s <- 0
for (i in VEC) s <- s + x[i, i]
s <- 0
for (i in x) s <- s + x[i, i]
y <- 0
i <- 0
repeat {
if (y > 9) break
i <- i + 1
y <- y + 3
}
y <- 0
i <- 0
while(y <= 12) y <- y + 3
t <- 0
S <- 0
while (CONDITION) {
t <- t + 1
S <- S * 1.02
S <- S + 100
}
t <- 0
S <- 0
while (CONDITION) {
t <- t + 1
S <- S * 1.02
S <- S + 100
}
t <- 0
S <- 0
while (s %in% 4000) {
t <- t + 1
S <- S * 1.02
S <- S + 100
}
print(s)
t <- 0
S <- 0
while (s != 4000) {
t <- t + 1
S <- S * 1.02
S <- S + 100
}
print(s)
t <- 0
S <- 0
while (s < 4000) {
t <- t + 1
S <- S * 1.02
S <- S + 100
}
print(s)
t <- 0
S <- 0
while (t in 1 : 30) {
t <- t + 1
S <- S * 1.02
S <- S + 100
}
t <- 0
S <- 0
while (s < 4000) {
t <- t + 1
S <- S * 1.02
S <- S + 100
}
while (s < 4000) {
t <- t + 1
S <- S * 1.02
S <- S + 100
}
set.seed(1)
x <- rnorm(100, mean = 10)
head(x)
summary(x)
mean(x)
max(x)
my_mean <- function(x){
s <- 0
for (i in 1:nrow(x)){
s <- s + x[i]
s <- s + 1
}
print(x) # sum;
print(s) # counter;
}
my_mean(x)
my_mean <- function(x){
s <- 0
for (i in 1:nrow(x)){
s <- s + x[i]
s <- s + 1
}
#print(x) # sum;
#print(s) # counter;
}
View(my_mean)
View(my_mean)
my_mean(x)
my_mean <- function(x){
s <- 0
for (i in 1:length(x)){
s <- s + x[i]
s <- s + 1
}
#print(x) # sum;
#print(s) # counter;
}
my_mean(x)
x
print(x)
print(my_mean(x))
my_mean <- function(x){
s <- 0
for (i in 1:length(x)){
s <- s + x[i]
s <- s + 1
}
print(x) # sum;
print(s) # counter;
}
x
my_mean(x)
my_mean(s)
my_max <- function(x){
max = -inf; ## initialize max
for (i in 1:length(x)){
if (x>max)max <- x
}
print(x)
}
my_max(x)
my_max <- function(x){
max = 0 ## initialize max
for (i in 1:length(x)){
if (x>max)max <- x
}
print(x)
}
my_max(x)
my_max <- function(x){
max = 0 ## initialize max
for (i in 1:length(x)){
if (x[i]>max)max <- MAX
}
print(x)
}
my_max(x)
my_max <- function(x){
max = 0 ## initialize max
for (i in 1:length(x)){
if (x[i]>max)max <- max
}
print(x)
}
my_max(x)
}
my_max <- function(x){
max = 0 ## initialize max
for (i in 1:length(x)){
if (x[i]>max)max <- x
}
print(x)
}
my_max(x)
my_max <- function(x){
max = 0 ## initialize max
for (i in 1:length(x)){
if (x[i]>max)max <- x[i]
}
print(x)
}
my_max(x)
my_max <- function(x){
max = 0 ## initialize max
for (i in 1:length(x)){
if (x[i]>max)max <- x[i]
}
print(max)
}
my_max(x)
my_mean <- function(x){
x_sum <- 0
x_num <- 0
for (i in x){
x_sum <- x_num + 1
s <- s + 1
x_mean = x_sum/x_num
}
print(x_mean)
}
my_mean(x)
my_mean <- function(x){
x_sum <- 0
x_num <- 0
for (i in x){
x_sum <- x_num + 1
x_mean = x_sum/x_num
}
print(x_mean)
}
my_mean(x)
my_mean <- function(x){
x_sum <- 0
x_num <- 0
for (i in 1:length(x)){
x_sum <- x_num + x[i]
x_mean = x_sum/x_num
}
print(x_mean)
}
my_mean <- function(x){
x_sum <- 0
x_num <- 0
for (i in 1:length(x)){
x_sum <- x_num + x[i]
x_mean = x_sum/x_num
}
print(x_mean)
}
my_mean(x)
x <- 100
for (t in 1:48){    # loop is equivalent to 1.05^48
x <- x*1.05
}
x
x <- 100
t <- 0
while (x <= 1e6){
t <- t + 1
x <- 1.05*x
}
x
t
x <- 100
t <- 0
while (x <= 1e6){
t <- t + 1
x <- 1.05*x
}
x
t
x <- 100
t <-0
repeat{
t <- t + 1
x <- 1.05*x
if (x < 1e6) break
}
x
t
x <- 100
t <- 0
while (x <= 1e6){
t <- t + 1
x <- 1.05*x
}
x
t
x <- 100
t <-0
repeat{
t <- t + 1
x <- 1.05*x
if (x <= 1e6) break
}
x
t
x <- 100
t <- 0
repeat{
t <- t + 1
x <- 1.05*x
if (x <= 1e6) break
}
x
t
x = c("1e-5","170" ,"202", "0.3" , "11" ,  "NA" ,  "15.9")
max(x)
min(x)
say_hello_to <- function(name) {
res <- print(paste(Good Morning, name))
invisible(res)
}
say_hello_to <- function(name) {
cat("Good Morning", name, "\n")
invisible(name)
}
say_hello_to <- function(name) {
res <- print(paste("Good Morning", "name"))
return(res)
}
say_hello_to <- function(name) {
res <- paste("Good Morning", name)
cat(res, "\n")
invisible(res)
}
say_hello_to("Anna")
View(say_hello_to)
say_hello_to <- function(name) {
res <- print(paste(Good Morning, name))
invisible(res)
}
say_hello_to <- function(name) {
cat("Good Morning", name, "\n")
invisible(name)
}
say_hello_to("Anna")
View(say_hello_to)
say_hello_to <- function(name) {
cat("Good Morning", name, "\n")
invisible(name)
}
View(say_hello_to)
say_hello_to("Anna")
load("C:/Users/david/Downloads/columbo.rda")
load("~/MA/VU introduction into programming with R/win-library/3.6/Archive/Scripts/columbo.rda")
setwd("~/MA/VU introduction into programming with R/win-library/3.6/Archive/Scripts")
c(class = class(colombo), type = typeof(colombo), nrow = nrow(colombo), ncol = ncol(colombo))
c(class = class(columbo), type = typeof(columbo), nrow = nrow(columbo), ncol = ncol(columbo))
names(attributes(columbo))
number_of_episodes <- nrow(columbo)
cat("In total, there were", number_of_episodes, "episodes.\n")
year_first <- min(columbo[, "year"])
year_last <- max(columbo[,"year"])
cat("The first episode was released in", year_first, " and the last one released in", year_last)
View(columbo)
View(columbo)
number_eighties <- sum(columbo[,"year"] >= 1980 & columbo[, "year"] <= 1989)
cat("There are", number_eighties, "episodes from the eighties.\n")
year_first <- min(columbo[, "year"])
year_last <- max(columbo[,"year"])
year_first_last <- range(columbo[, "year"])
cat("The first episode was released in", year_first, " and the last one released in", year_last)
cat("The first episode was released in", min(year_first_last), " and the last one released in", max(year_first_last))
max(year_first_last)
# How many seasons have been broadcasted?
number_seasons <- length(unique(columbo[, "season"]))
cat("There were", number_seasons, "different seasons.\n")
seasons <- max(columbo[,"season"])
cat("There were", seasons, "different seasons.\n")
episodes_per_season <- table(columbo[, "season"])
episodes_per_season()
episodes_per_season
episodes_per_season <- table(columbo[, "season"])
> episodes_per_season <- matrix(table(columbo[, "season"]))
episodes_per_season <- matrix(table(columbo[, "season"]))
episodes_per_season
epi_per_seas_min <- names(episodes_per_season[which.min(episodes_per_season)])
epi_per_seas_max <- names(episodes_per_season[which.max(episodes_per_season)])
epi_per_seas_min
epi_per_seas_max
epi_per_seas_min <- names(episodes_per_season)[which.min(episodes_per_season)]
epi_per_seas_max <- names(episodes_per_season)[which.max(episodes_per_season)]
episodes_per_season <- matrix(table(columbo[, "season"]))
epi_per_seas_min <- names(episodes_per_season)[which.min(episodes_per_season)]
epi_per_seas_max <- names(episodes_per_season)[which.max(episodes_per_season)]
epi_per_seas_min <- which.min(episodes_per_season)
epi_per_seas_max <- which.max(episodes_per_season)
View(episodes_per_season)
epi_per_seas_min
epi_per_seas_max
cat("Season", epi_per_seas_min, "hast the least, season", epi_per_seas_max, "the most episodes.\n")
episodes_per_season[1] - episodes_per_season[10]
abs(episodes_per_season[1] - episodes_per_season[10])
cat("The absolute difference of the number of episodes in the first and the last season is", absolute_diff)
absolute_diff <- abs(episodes_per_season[1] - episodes_per_season[10])
cat("The absolute difference of the number of episodes in the first and the last season is", absolute_diff)
